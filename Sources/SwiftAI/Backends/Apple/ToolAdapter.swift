#if canImport(FoundationModels)
import FoundationModels
import Foundation

/// Errors specific to the FoundationModelsToolAdapter
enum ToolAdapterError: Error, LocalizedError {
  case invalidUTF8Encoding

  var errorDescription: String? {
    switch self {
    case .invalidUTF8Encoding:
      return "Failed to encode GeneratedContent.jsonString as UTF-8 data"
    }
  }
}

/// Adapts a SwiftAI.Tool to conform to FoundationModels.Tool protocol.
///
/// This adapter enables SwiftAI tools to be used with Apple's FoundationModels framework
/// by converting between the different protocol requirements and type systems.
@available(iOS 26.0, macOS 26.0, *)
struct FoundationModelsToolAdapter: FoundationModels.Tool {
  struct Args: ConvertibleFromGeneratedContent {
    /// The input parameters of the tool as generated by the Foundation language model.
    let content: GeneratedContent

    init(_ content: GeneratedContent) throws {
      self.content = content
    }
  }

  /// The underlying SwiftAI tool being adapted.
  private let swiftAITool: any SwiftAI.Tool

  /// Creates an adapter for a SwiftAI tool.
  /// - Parameter tool: The SwiftAI tool to adapt.
  init(wrapping tool: any SwiftAI.Tool) {
    self.swiftAITool = tool
  }

  // MARK: - FoundationModels.Tool Protocol Requirements

  var name: String {
    swiftAITool.name
  }

  var description: String {
    swiftAITool.description
  }

  var parameters: GenerationSchema {
    do {
      return try type(of: swiftAITool).parameters.toGenerationSchema()
    } catch {
      // Return a minimal schema as fallback - this prevents crashes while still indicating an issue
      // In practice, this should be rare as SwiftAI schemas should convert successfully.
      // TODO: Revisit this fallback logic.
      return try! GenerationSchema(
        root: DynamicGenerationSchema(type: String.self, guides: []), dependencies: [])
    }
  }

  var includesSchemaInInstructions: Bool {
    // Default to true for maximum compatibility
    // TODO: Consider making this configurable
    true
  }

  func call(arguments: Args) async throws -> SwiftAI.Prompt {
    do {
      // Convert GeneratedContent to UTF-8 data
      guard let jsonData = arguments.content.jsonString.data(using: .utf8) else {
        throw LLMError.toolExecutionFailed(
          tool: swiftAITool,
          underlyingError: ToolAdapterError.invalidUTF8Encoding
        )
      }

      let swiftAIResult = try await swiftAITool.call(jsonData)
      return SwiftAI.Prompt(chunks: swiftAIResult.chunks)
    } catch {
      // TODO: The catch block is too wide, and we may be casting other errors as `toolExecutionFailed`.
      // We should catch specific errors and map them to the relevant LLMError cases.
      throw LLMError.toolExecutionFailed(tool: swiftAITool, underlyingError: error)
    }
  }
}

@available(iOS 26.0, macOS 26.0, *)
extension SwiftAI.Prompt: FoundationModels.PromptRepresentable {
  public var promptRepresentation: FoundationModels.Prompt {
    FoundationModels.Prompt {
      for chunk in chunks {
        switch chunk {
        case .text(let text):
          text
        case .structured(let content):
          content.generatedContent
        }
      }
    }
  }
}
#endif
