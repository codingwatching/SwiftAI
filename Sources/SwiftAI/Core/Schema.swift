import Foundation

/// Defines the structure and constraints of types to generate.
///
/// A schema describes the expected format of data that can be generated by language models,
/// including type information, validation constraints, and metadata to guide generation.
public enum Schema: Sendable, Equatable {
  /// An object with defined properties.
  case object(name: String, description: String?, properties: [String: Property])

  /// A union type that can match any of the provided schemas.
  indirect case anyOf(name: String, description: String?, schemas: [Schema])

  /// An array containing items of a specific schema.
  indirect case array(items: Schema, constraints: [AnyArrayConstraint])

  /// A string value with optional constraints.
  case string(constraints: [Constraint<String>])

  /// An integer value with optional constraints.
  case integer(constraints: [Constraint<Int>])

  /// A floating-point number with optional constraints.
  case number(constraints: [Constraint<Double>])

  /// A boolean value with optional constraints.
  case boolean(constraints: [Constraint<Bool>])

  // TODO: Add support to object references and recursive schemas.

  /// Represents a property within an object schema.
  public struct Property: Sendable, Equatable {
    /// The schema that defines this property's structure.
    public let schema: Schema

    /// Provides context for this property within the parent object.
    public let description: String?

    /// Whether this property is optional in the parent object.
    public let isOptional: Bool

    /// Creates a new property with the specified schema and optionality.
    ///
    /// - Parameters:
    ///   - schema: The schema that defines this property's structure
    ///   - description: Optional description for this property
    ///   - isOptional: Whether this property is optional in the parent object
    public init(schema: Schema, description: String?, isOptional: Bool) {
      self.schema = schema
      self.description = description
      self.isOptional = isOptional
    }
  }
}
