import Foundation

/// Defines the structure and constraints of types to generate.
///
/// A schema describes the expected format of data that can be generated by language models,
/// including type information, validation constraints, and metadata to guide generation.
public enum Schema: Sendable, Equatable {
  /// An object with defined properties.
  case object(name: String, description: String?, properties: [String: Property])

  /// A union type that can match any of the provided schemas.
  indirect case anyOf(name: String, description: String?, schemas: [Schema])

  /// An array containing items of a specific schema.
  indirect case array(items: Schema, constraints: [AnyConstraint])  // FIXME: This should be ArrayConstraint in the future.

  /// A string value with optional constraints.
  case string(constraints: [StringConstraint])

  /// An integer value with optional constraints.
  case integer(constraints: [IntConstraint])

  /// A floating-point number with optional constraints.
  case number(constraints: [DoubleConstraint])

  /// A boolean value with optional constraints.
  case boolean(constraints: [BoolConstraint])

  // TODO: Add support to object references and recursive schemas.

  /// Returns a new schema with the given constraint.
  ///
  /// If the constraint is not compatible with the schema, then a runtime assertion is raised
  /// in debug builds, and the constraint is ignored in release builds.
  ///
  /// - Parameter constraint: The constraint to add.
  /// - Returns: A new schema with the constraint added.
  public func withConstraint<Value>(_ constraint: Constraint<Value>) -> Schema {
    withConstraint(AnyConstraint(constraint))
  }

  /// Returns a new schema with the given constraints.
  ///
  /// - Parameter constraints: The constraints to add.
  /// - Returns: A new schema with the constraints added.
  public func withConstraints<Value>(_ constraints: [Constraint<Value>]) -> Schema {
    withConstraints(constraints.map(AnyConstraint.init))
  }

  func withConstraint(_ constraint: AnyConstraint) -> Schema {
    switch (self, constraint.payload) {
    case (.array(let items, let constraints), .sub(let subConstraint)):
      // Apply the sub-constraint to the array items
      return .array(items: items.withConstraint(subConstraint), constraints: constraints)

    case (_, .this(let kind)):
      // Handle direct constraints
      switch (self, kind) {
      case (.string(let constraints), .string(let newConstraint)):
        return .string(constraints: constraints + [newConstraint])

      case (.integer(let constraints), .int(let newConstraint)):
        return .integer(constraints: constraints + [newConstraint])

      case (.number(let constraints), .double(let newConstraint)):
        return .number(constraints: constraints + [newConstraint])

      case (.boolean(let constraints), .boolean):
        return .boolean(constraints: constraints)

      case (.array(let items, let constraints), .array(let arrayConstraint)):
        let newConstraint = AnyConstraint(kind: .array(arrayConstraint))
        return .array(items: items, constraints: constraints + [newConstraint])

      default:
        assertionFailure("Invalid constraint \(kind) for schema \(self)")
        return self
      }

    default:
      assertionFailure("Invalid constraint \(constraint.payload) for schema \(self)")
      return self
    }
  }

  func withConstraints(_ constraints: [AnyConstraint]) -> Schema {
    constraints.reduce(self) { schema, constraint in
      schema.withConstraint(constraint)
    }
  }

  /// Represents a property within an object schema.
  public struct Property: Sendable, Equatable {
    /// The schema that defines this property's structure.
    public let schema: Schema

    /// Provides context for this property within the parent object.
    public let description: String?

    /// Whether this property is optional in the parent object.
    public let isOptional: Bool

    /// Creates a new property with the specified schema and optionality.
    ///
    /// - Parameters:
    ///   - schema: The schema that defines this property's structure
    ///   - description: Optional description for this property
    ///   - isOptional: Whether this property is optional in the parent object
    public init(schema: Schema, description: String?, isOptional: Bool) {
      self.schema = schema
      self.description = description
      self.isOptional = isOptional
    }
  }
}
