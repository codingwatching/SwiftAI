import Foundation

/// Defines the structure and constraints of types to generate.
///
/// A schema describes the expected format of data that can be generated by language models,
/// including type information, validation constraints, and metadata to guide generation.
public enum Schema: Sendable, Equatable {
  /// An object with defined properties.
  case object(properties: [String: Property], metadata: Metadata?)

  /// An array containing items of a specific schema.
  indirect case array(items: Schema, constraints: [ArrayConstraint], metadata: Metadata?)

  /// A string value with optional constraints.
  case string(constraints: [StringConstraint], metadata: Metadata?)

  /// An integer value with optional constraints.
  case integer(constraints: [IntConstraint], metadata: Metadata?)

  /// A floating-point number with optional constraints.
  case number(constraints: [DoubleConstraint], metadata: Metadata?)

  /// A boolean value.
  case boolean(metadata: Metadata?)

  /// A union type that can match any of the provided schemas.
  indirect case anyOf(schemas: [Schema], metadata: Metadata?)

  /// Represents a property within an object schema.
  public struct Property: Sendable, Equatable {
    /// The schema that defines this property's structure.
    public let schema: Schema

    /// Whether this property is optional in the parent object.
    public let isOptional: Bool

    /// Creates a new property with the specified schema and optionality.
    ///
    /// - Parameters:
    ///   - schema: The schema that defines this property's structure
    ///   - isOptional: Whether this property is optional in the parent object
    public init(schema: Schema, isOptional: Bool) {
      self.schema = schema
      self.isOptional = isOptional
    }
  }

  /// Metadata for documenting schemas.
  public struct Metadata: Sendable, Equatable {
    /// A short, human-readable title for the schema.
    public let title: String?

    /// A detailed description explaining the purpose and usage of the schema.
    public let description: String?

    /// Creates new metadata with optional title and description.
    ///
    /// - Parameters:
    ///   - title: A short, human-readable title for the schema
    ///   - description: A detailed description explaining the purpose and usage
    public init(title: String? = nil, description: String? = nil) {
      self.title = title
      self.description = description
    }
  }
}
